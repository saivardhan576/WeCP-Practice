{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class HttpService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.serverName = environment.apiUrl;\n  }\n  getOrderStatus(cargoId) {\n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`);\n    return this.http.get(this.serverName + `/api/customer/cargo-status/${cargoId}`, {\n      headers: headers\n    });\n  }\n  updateCargoStatus(cargoId, newStatus) {\n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`);\n    return this.http.put(this.serverName + `/api/driver/update-cargo-status/${cargoId}/${newStatus}`, {\n      headers: headers\n    });\n  }\n  assignDriver(driverid, cargoId) {\n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`);\n    return this.http.post(`${this.serverName}/api/business/assign-cargo/${cargoId}/${driverid}`, {},\n    // Body\n    {\n      headers: headers\n    });\n  }\n  getAssignOrders(driverId) {\n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`);\n    return this.http.get(this.serverName + `/api/driver/cargo/${driverId}`, {\n      headers: headers\n    });\n  }\n  getCargo() {\n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`);\n    return this.http.get(this.serverName + `/api/business/cargo`, {\n      headers: headers\n    });\n  }\n  getDrivers() {\n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`);\n    return this.http.get(this.serverName + `/api/business/drivers`, {\n      headers: headers\n    });\n  }\n  addCargo(details) {\n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`);\n    return this.http.post(this.serverName + '/api/business/cargo', details, {\n      headers: headers\n    });\n  }\n  Login(details) {\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    return this.http.post(this.serverName + '/api/login', details, {\n      headers: headers\n    });\n  }\n  registerUser(details) {\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    return this.http.post(this.serverName + '/api/register', details, {\n      headers: headers\n    });\n  }\n  static #_ = this.ɵfac = function HttpService_Factory(t) {\n    return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpService,\n    factory: HttpService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","environment","HttpService","constructor","http","authService","apiUrl","getOrderStatus","cargoId","authToken","getToken","headers","set","get","serverName","updateCargoStatus","newStatus","put","assignDriver","driverid","post","getAssignOrders","driverId","getCargo","getDrivers","addCargo","details","Login","registerUser","factory","providedIn"],"sourceRoot":"","sources":["/home/ubuntu/root/client/src/services/http.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../environments/environment.development';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n  public serverName=environment.apiUrl;\n  constructor(private http: HttpClient, private authService:AuthService) {\n\n   }\n \n  getOrderStatus(cargoId:any):Observable<any> {\n   \n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`)\n    return this.http.get(this.serverName+`/api/customer/cargo-status/${cargoId}`,{headers:headers});\n  }\n  updateCargoStatus(cargoId:any,newStatus:any):Observable<any> {\n  \n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`);\n    return this.http.put<any>(this.serverName+`/api/driver/update-cargo-status/${cargoId}/${newStatus}`,{headers:headers});\n  }\n  assignDriver(driverid: any, cargoId: any): Observable<any> {\n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`);\n    return this.http.post<any>(\n      `${this.serverName}/api/business/assign-cargo/${cargoId}/${driverid}`,\n      {}, // Body\n      { headers: headers }\n    );\n  }\n  \n\n  getAssignOrders(driverId:any):Observable<any> {\n   \n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`)\n    return this.http.get(this.serverName+`/api/driver/cargo/${driverId}`,{headers:headers});\n  }\n  getCargo():Observable<any> {\n   \n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`)\n    return this.http.get(this.serverName+`/api/business/cargo`,{headers:headers});\n  }\n\n  getDrivers():Observable<any> {\n   \n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`)\n    return this.http.get(this.serverName+`/api/business/drivers`,{headers:headers});\n  }\n  addCargo(details:any):Observable<any> {\n  \n    const authToken = this.authService.getToken();\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${authToken}`);\n    return this.http.post(this.serverName+'/api/business/cargo',details,{headers:headers});\n  }\n  Login(details:any):Observable<any> {\n    \n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    return this.http.post(this.serverName+'/api/login',details,{headers:headers});\n  }\n  registerUser(details:any):Observable<any> {\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    return this.http.post(this.serverName+'/api/register',details,{headers:headers});\n  }\n \n  \n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}